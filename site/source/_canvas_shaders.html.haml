// two shaders from http://stemkoski.github.io/Three.js/Shader-Glow.html
%script{:id=>"vertexShader", :type=>"x-shader/x-vertex"}
  :plain
    uniform vec3 viewVector;
    uniform float c;
    uniform float p;
    varying float intensity;
    void main() 
    {
      vec3 vNormal = normalize( normalMatrix * normal );
      vec3 vNormel = normalize( normalMatrix * viewVector );
      intensity = pow( c - dot(vNormal, vNormel), p );
      
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
    }

%script{:id=>"fragmentShader", :type=>"x-shader/x-vertex"}
  :plain
    uniform vec3 glowColor;
    varying float intensity;
    void main() 
    {
      vec3 glow = glowColor * intensity;
        gl_FragColor = vec4( glow, 1.0 );
    }

// two shaders from http://stemkoski.github.io/Three.js/Atmosphere.html
%script{:id=>"vertexShaderAtmosphere", :type=>"x-shader/x-vertex"}
  :plain
    varying vec3 vNormal;
    void main()
    {
      vNormal = normalize( normalMatrix * normal );
      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
    }

%script{:id=>"fragmentShaderAtmosphere", :type=>"x-shader/x-vertex"}
  :plain
    uniform float c;
    uniform float p;
    varying vec3 vNormal;
    void main()
    {
      float intensity = pow( c - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) ), p );
      gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;
    }

// two shaders from http://stemkoski.github.io/Three.js/Shader-Halo.html
%script{:id=>"vertexShaderHalo", :type=>"x-shader/x-vertex"}
  :plain
    varying vec3 vNormal;
    void main()
    {
        vNormal = normalize( normalMatrix * normal );
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
    }

%script{:id=>"fragmentShaderHalo", :type=>"x-shader/x-vertex"}
  :plain
    uniform float c;
    uniform float p;
    varying vec3 vNormal;
    void main()
    {
        float intensity = pow( c - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) ), p );
        gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;
    }

// lava shader from http://mrdoob.github.io/three.js/examples/webgl_shader_lava.html
%script{:id=>"fragmentShaderLava", :type=>"x-shader/x-vertex"}
  :plain
    uniform float time;
    uniform vec2 resolution;

    uniform float fogDensity;
    uniform vec3 fogColor;

    uniform sampler2D texture1;
    uniform sampler2D texture2;

    varying vec2 vUv;

    void main( void ) {
      vec2 position = -1.0 + 2.0 * vUv;

      vec4 noise = texture2D( texture1, vUv );
      vec2 T1 = vUv + vec2( 1.5, -1.5 ) * time  *0.02;
      vec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;

      T1.x += noise.x * 2.0;
      T1.y += noise.y * 2.0;
      T2.x -= noise.y * 0.2;
      T2.y += noise.z * 0.2;

      float p = texture2D( texture1, T1 * 2.0 ).a;

      vec4 color = texture2D( texture2, T2 * 2.0 );
      vec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );

      if( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }
      if( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }
      if( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }

      gl_FragColor = temp;

      float depth = gl_FragCoord.z / gl_FragCoord.w;
      const float LOG2 = 1.442695;
      float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );
      fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );

      gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );
    }

%script{:id=>"vertexShaderLava", :type=>"x-shader/x-vertex"}
  :plain
    uniform vec2 uvScale;
    varying vec2 vUv;

    void main()
    {
      vUv = uvScale * uv;
      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      gl_Position = projectionMatrix * mvPosition;
    }
