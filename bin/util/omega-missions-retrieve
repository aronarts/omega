#!/usr/bin/ruby
# Retrieve missions entity
#
# Copyright (C) 2013 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3 http://www.gnu.org/licenses/agpl.txt

require 'pp'
require 'rubygems'
require 'optparse'

require 'omega'
require 'rjr/nodes/amqp'

id = nil
optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this help screen') do
    puts opts
    exit
  end

  opts.on('-i', '--id ID', 'id of mission to retrieve') do |i|
    id = i
  end
end
optparse.parse!

RJR::Logger.log_level= ::Logger::INFO
node    = RJR::Nodes::AMQP.new :node_id => 'omega-missions-retrieve',
                               :broker  => 'localhost'
user    = Users::User.new(:id => 'admin', :password => 'nimda')
session = node.invoke('omega-queue', 'users::login', user)
node.message_headers['session_id'] = session.id

missions = id.nil? ?
           node.invoke('omega-queue', 'missions::get_missions') :
           node.invoke('omega-queue', 'missions::get_mission', 'with_id', id)

if missions.nil? && !id.nil?
  puts "Mission #{id} could not be found"
  exit 1
end

missions = [missions] unless missions.is_a?(Array)

missions.each { |mission|
  puts "Mission: "
  pp mission

  # XXX trunate long callback text
  #['requirements', 'assignment_callbacks', 'victory_conditions',
  # 'victory_callbacks', 'failure_callbacks'].each { |cb_q|
  #  formatted['data'][cb_q].each { |cb|
  #    cb['data']['sblock'] = cb['data']['sblock'].slice!(0, 50) + "..."
  #  }
  #}
}
