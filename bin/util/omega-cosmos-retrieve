#!/usr/bin/ruby
# Retrieve cosmos entity
#
# Copyright (C) 2012-2013 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3 http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'optparse'
require 'colored'

require 'omega'
require 'rjr/nodes/amqp'

name          = nil
manufactured  = false
alive         = false
callbacks     = false
extended      = false

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this help screen') do
    puts opts
    exit
  end

  opts.on('-m', '--manufactured', 'include optional manufacted entities information') do
    manufactured = true
  end

  opts.on('-a', '--alive', 'only display manufactured entities that are alive') do
    alive = true
  end

  opts.on('-n', '--name name', 'name of entity to retrieve') do |i|
    name = i
  end

  opts.on('-c', '--callbacks', 'display entity callbacks') do
    callbacks = true
  end

  opts.on('-e', '--extended', 'print extended attributes') do
    extended = true
  end
end

optparse.parse!

if name.nil?
  puts "Must specify name"
  exit 1
end

$extended = extended

RJR::Logger.log_level= ::Logger::INFO

$rjr_node   = RJR::Nodes::AMQP.new :node_id => 'omega-cosmos-retrieve', :broker => 'localhost', :keep_alive => true
login_user = Users::User.new(:id => 'admin', :password => 'nimda')
session    = $rjr_node.invoke('omega-queue', 'users::login', login_user)
$rjr_node.message_headers['session_id'] = session.id

entity = $rjr_node.invoke('omega-queue', 'cosmos::get_entity', 'with_name', name)

$manufactured_entities = []
if manufactured
  if entity.is_a?(Cosmos::Entities::Galaxy)
    entity.solar_systems.each { |sys|
      $manufactured_entities += $rjr_node.invoke('omega-queue', 'manufactured::get_entities', 'under', sys.id)
    }

  elsif entity.is_a?(Cosmos::Entities::SolarSystem)
    $manufactured_entities = $rjr_node.invoke('omega-queue', 'manufactured::get_entities', 'under', entity.id)

  # elsif entity.is_a?(Asteroid) # TODO get entities mining this asteroid
  end
end

if alive
  $manufactured_entities.reject! { |entity| !entity.alive? }
end

puts "Entity: " + entity.to_s

def indent(i)
  r = ''
  i.times { r += ' ' }
  r
end

if callbacks
  def print_callbacks(entity, i=0)
    return if entity.nil?

    puts indent(i) + "Callbacks:" if entity.location.callbacks.size > 0
    entity.location.callbacks.each { |type,callbacks|
      puts indent(i+1) + "- #{type}: #{callbacks.collect { |c| [c.endpoint_id, c.to_s] }}"
    }
  end

  def print_notifications(entity, i=0)
    return if entity.nil?

    puts indent(i) + "Notifications:" if (entity.callbacks.size) > 0
    entity.callbacks.each { |n|
      puts indent(i+1) + "- #{n.type} -> #{n.endpoint_id}"
    }
  end

else
  def print_callbacks(entity, i=0)
  end

  def print_notifications(entity, i=0)
  end
end

def print_galaxy(galaxy, i=0)
  puts indent(i) + "galaxy " + galaxy.name.bold.green
  print_callbacks(galaxy, i+1)
  galaxy.solar_systems.each { |sys|
    print_system(sys, i+1)
  }
end

def print_system(sys, i=0)
  puts indent(i) + "system " + sys.name.bold.green + " @ " + sys.location.coordinates.join(', ')
  print_callbacks(sys, i+1)
  print_star(sys.star, i+1)
  sys.planets.each { |p|
    print_planet(p, i+1)
  }
  sys.asteroids.each { |a|
    print_asteroid(a, i+1)
  }
  sys.jump_gates.each { |j|
    print_jump_gate(j, i+1)
  }
  $manufactured_entities.select { |mu| mu.system_id == sys.id }.each{ |mu|
    print_manufactured_entity(mu, i+1)
  }
end

def print_star(star, i=0)
  puts indent(i) + "star " + star.name + " @ " + star.location.coordinates.join(', ') unless star.nil?
  print_callbacks(star, i+1)
end

def print_planet(planet, i=0)
  puts indent(i) + "planet " + planet.name + " @ " + planet.location.coordinates.join(', ')
  print_callbacks(planet, i+1)
  planet.moons.each { |m|
    print_moon(m, i+1)
  }
  print_callbacks(planet, i+1)
end

def print_asteroid(asteroid, i=0)
  puts indent(i) + "asteroid " + asteroid.name.bold.red + " @ " + asteroid.location.coordinates.join(', ')
  print_callbacks(asteroid, i+1)

  resources = $rjr_node.invoke('omega-queue', 'cosmos::get_resources', asteroid.id)
  puts indent(i+i) + "resources: "
  resources.each { |rs|
    print_resource(rs, i+2)
  }
end

def print_resource(resource, i=0)
  puts indent(i) + " " + resource.material_id.red + " (" + resource.quantity.to_s + ")"
end

def print_moon(moon, i=0)
  puts indent(i) + "moon " + moon.name + " @ " + moon.location.coordinates.join(', ')
  print_callbacks(moon, i+1)
end

def print_jump_gate(jump_gate, i=0)
  # TODO retrieve / print endpoint system
  puts indent(i) + "jump gate to " + jump_gate.endpoint_id + " @ " + jump_gate.location.coordinates.join(', ')
  print_callbacks(jump_gate, i+1)
end

def print_manufactured_entity(mu, i=0)
  puts indent(i) + mu.class.to_s + " " + mu.id.to_s.bold.yellow +
                   " @ " + mu.location.coordinates.join(', ') + " -> " + mu.location.ms.class.to_s.split('::').last.downcase

  if $extended
    puts indent(i+1) + "user: #{mu.user_id}"

    if mu.is_a?(Manufactured::Ship)
      puts indent(i+1) + "hp: #{mu.hp}"
      puts indent(i+1) + "attacking: #{mu.attacking_id}"
    end

    puts indent(i+1) + "resources: " if mu.resources.size > 0
    mu.resources.each { |r|
      print_resource(r, i+2)
    }
  end

  print_callbacks(mu, i+1)
  print_notifications(mu, i+1)
end

case entity
when Cosmos::Entities::Galaxy
  print_galaxy(entity)
when Cosmos::Entities::SolarSystem
  print_system(entity)
when Cosmos::Entities::Star
  print_star(entity)
when Cosmos::Entities::Planet
  print_planet(entity)
when Cosmos::Entities::Asteroid
  print_asteroid(entity)
when Cosmos::Entities::Moon
  print_moon(entity)
when Cosmos::Entities::JumpGate
  print_jump_gate(entity)
end
