#!/usr/bin/ruby
# Retrieve cosmos entity
#
# Copyright (C) 2012-2013 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3 http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'optparse'
require 'colored'

require 'omega'
require 'rjr/nodes/amqp'

###
# Parse CLI

def conf
  @conf ||= {:name         => nil,
             :manufactured => false,
             :alive        => false,
             :callbacks    => false,
             :extended     => false,
             :asteroids    => false,
             :refresh      => false}
end

def require_params!
  return unless conf[:name].nil?

  puts "Must specify name".bold.red
  exit 1
end

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this help screen') do
    puts opts
    exit
  end

  opts.on('-m', '--manufactured', 'include optional manufacted entities information') do
    conf[:manufactured] = true
  end

  opts.on('-a', '--alive', 'only display manufactured entities that are alive') do
    conf[:alive] = true
  end

  opts.on('-n', '--name name', 'name of entity to retrieve') do |n|
    conf[:name] = n
  end

  opts.on('-r', '--refresh [seconds=n]', 'keep process alive and refresh data event n seconds') do |s|
    s = 5 if s.nil?
    conf[:refresh] = s.to_i
  end

  opts.on('-c', '--callbacks', 'display entity callbacks') do
    conf[:callbacks] = true
  end

  opts.on('-e', '--extended', 'print extended attributes') do
    conf[:extended] = true
  end

  opts.on('--ast', '--asteroids', 'print asteroids') do
    conf[:asteroids] = true
  end
end

optparse.parse!
require_params!

###
# Retrieve Data

def node
  # TODO alternate connection types, destination options
  @node ||= RJR::Nodes::AMQP.new :node_id    => 'omega-cosmos-retrieve',
                                 :broker     => 'localhost',
                                 :keep_alive => true
end

def user
  @user ||= Users::User.new(:id       => 'admin',
                            :password => 'nimda')
end

def login
  node.invoke('omega-queue', 'users::login', user)
end

def set_headers(session)
  node.message_headers['session_id'] = session.id
end

def get_entity
  node.invoke('omega-queue', 'cosmos::get_entity', 'with_name', conf[:name])
end

def get_galaxy_manu(entity)
  entity.solar_systems.collect { |sys|
    node.invoke('omega-queue', 'manufactured::get_entities', 'under', sys.id)
  }.flatten
end

def get_system_manu(entity)
  node.invoke('omega-queue', 'manufactured::get_entities', 'under', entity.id)
end

def get_manu(entity)
  if entity.is_a?(Cosmos::Entities::Galaxy)
    get_galaxy_manu(entity)

  elsif entity.is_a?(Cosmos::Entities::SolarSystem)
    get_system_manu(entity)

  # elsif entity.is_a?(Asteroid) # TODO get entities mining this asteroid
  end
end

def get_data
  entity = get_entity
  conf[:entity] = entity

  manu_entities = conf[:manufactured] ? get_manu(entity) : []
  manu_entities.reject! { |manu| !manu.alive? } if conf[:alive]
  conf[:manu_entities] = manu_entities
end

RJR::Logger.log_level= ::Logger::INFO

session = login
set_headers session

###
# Print Output

def indent(i)
  r = ''
  i.times { r += ' ' }
  r
end

if conf[:callbacks]
  def print_callbacks(entity, i=0)
    return if entity.nil?

    puts indent(i) + "Callbacks:" if entity.location.callbacks.size > 0
    entity.location.callbacks.each { |type,callbacks|
      puts indent(i+1) + "- #{type}: #{callbacks.collect { |c| [c.endpoint_id, c.to_s] }}"
    }
  end

  def print_notifications(entity, i=0)
    return if entity.nil?

    puts indent(i) + "Notifications:" if (entity.callbacks.size) > 0
    entity.callbacks.each { |n|
      puts indent(i+1) + "- #{n.event_type} -> #{n.endpoint_id}"
    }
  end

else
  def print_callbacks(entity, i=0)
  end

  def print_notifications(entity, i=0)
  end
end

def coordinate_str(loc)
  loc.coordinates.collect { |c| c.round_to(2) }.join(', ').blue
end

def orientation_str(loc)
  loc.orientation.collect { |o| o.round_to(2) }.join(', ')
end

def print_galaxy(galaxy, i=0)
  puts indent(i) + "galaxy " + galaxy.name.bold.green
  puts indent(i+i) + "id: " + galaxy.id.bold
  print_callbacks(galaxy, i+1)
  galaxy.solar_systems.each { |sys|
    print_system(sys, i+1)
  }
end

def print_system(sys, i=0)
  puts indent(i) + "system " + sys.name.bold.green +
                   " @ "     + coordinate_str(sys.location)
  puts indent(i+i) + "id: " + sys.id.bold
  print_callbacks(sys, i+1)
  print_star(sys.star, i+1)
  sys.planets.each    { |p| print_planet(p,    i+1) }
  sys.asteroids.each  { |a| print_asteroid(a,  i+1) } if conf[:asteroids]
  sys.jump_gates.each { |j| print_jump_gate(j, i+1) }

  conf[:manu_entities].select { |mu| mu.system_id == sys.id }
                      .each   { |mu| print_manufactured_entity(mu, i+1) }
end

def print_star(star, i=0)
  return if star.nil?
  puts indent(i) + "star " + star.name +
                   " @ "   + coordinate_str(star.location)
  print_callbacks(star, i+1)
end

def print_planet(planet, i=0)
  puts indent(i) + "planet " + planet.name +
                   " @ "     + coordinate_str(planet.location)
  print_callbacks(planet, i+1)
  planet.moons.each { |m| print_moon(m, i+1) }
  print_callbacks(planet, i+1)
end

def print_asteroid(asteroid, i=0)
  puts indent(i) + "asteroid " + asteroid.name.bold.red +
                   " @ "       + coordinate_str(asteroid.location)
  print_callbacks(asteroid, i+1)

  resources = node.invoke('omega-queue', 'cosmos::get_resources', asteroid.id)
  puts indent(i+i) + "resources: "
  resources.each { |rs| print_resource(rs, i+2) }
end

def print_resource(resource, i=0)
  puts indent(i) + " " + resource.material_id.red + " (" + resource.quantity.to_s + ")"
end

def print_moon(moon, i=0)
  puts indent(i) + "moon " + moon.name +
                   " @ "   + coordinate_str(moon.location)
  print_callbacks(moon, i+1)
end

def print_jump_gate(jump_gate, i=0)
  # TODO retrieve / print endpoint system
  puts indent(i) + "jump gate to " + jump_gate.endpoint_id.bold +
                   " @ "           + coordinate_str(jump_gate.location)
  print_callbacks(jump_gate, i+1)
end

def print_manufactured_entity(mu, i=0)
  puts indent(i) + mu.class.to_s + " " + mu.id.to_s.bold.yellow +
                   " @ "  + coordinate_str(mu.location)  +
                   " > "  + orientation_str(mu.location)  +
                   " -> " + mu.location.ms.to_s

  if conf[:extended]
    puts indent(i+1) + "user: #{mu.user_id}"

    if mu.is_a?(Manufactured::Ship)
      puts indent(i+1) + "hp: #{mu.hp}"
      puts indent(i+1) + "attacking: #{mu.attacking_id}"
    end

    puts indent(i+1) + "resources: " if mu.resources.size > 0
    mu.resources.each { |r|
      print_resource(r, i+2)
    }
  end

  print_callbacks(mu, i+1)
  print_notifications(mu, i+1)
end

def print_entity
  entity = conf[:entity]
  puts "Entity: " + entity.to_s

  case entity
  when Cosmos::Entities::Galaxy
    print_galaxy(entity)
  when Cosmos::Entities::SolarSystem
    print_system(entity)
  when Cosmos::Entities::Star
    print_star(entity)
  when Cosmos::Entities::Planet
    print_planet(entity)
  when Cosmos::Entities::Asteroid
    print_asteroid(entity)
  when Cosmos::Entities::Moon
    print_moon(entity)
  when Cosmos::Entities::JumpGate
    print_jump_gate(entity)
  end
end

###
# Refresh loop

def clear_screen
  puts "\e[H\e[2J"
end

#def reset_cursor
#  puts "\033[0;0H"
#end

def trap_int
  trap("INT") do
    puts "Exiting".red.bold
    exit 0
  end
end

def main
  get_data
  clear_screen if conf[:refresh]
  print_entity
end

def refresh_loop
  while true
    main
    sleep conf[:refresh]
  end
end

if conf[:refresh]
  trap_int
  refresh_loop

else
  main
end
