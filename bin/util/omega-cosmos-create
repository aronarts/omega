#!/usr/bin/ruby
# Create new cosmos entity
#
# Copyright (C) 2012-2013 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3 http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'optparse'

require 'omega'
require 'rjr/nodes/amqp'

entity = nil
name   = nil
parent = nil
xcoord = nil
ycoord = nil
zcoord = nil
size = nil
color = nil

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this help screen') do
    puts opts
    exit
  end

  opts.on('-e', '--entity ENTITY', 'type of cosmos entity to create') do |e|
    entity = e
  end

  opts.on('-n', '--name NAME', 'name to give entity') do |n|
    name = n
  end

  opts.on('-p', '--parent ID', 'id of entity\'s parent') do |p|
    parent = p
  end

  opts.on('-x', '--xcoord COORDINATE', 'x coordiante of entity\'s location') do |x|
    xcoord = x
  end
  opts.on('-y', '--ycoord COORDINATE', 'y coordiante of entity\'s location') do |y|
    ycoord = y
  end
  opts.on('-z', '--zcoord COORDINATE', 'z coordiante of entity\'s location') do |z|
    zcoord = z
  end

  opts.on('-s', '--size SIZE', 'size of entity') do |s|
    size = s
  end
  opts.on('-c', '--color COLOR', 'color to give entity') do |c|
    color = c
  end
end

optparse.parse!

unless ['galaxy', 'solarsystem', 'star', 'asteroid', 'planet', 'moon'].include?(entity)
  puts "Invalid entity '#{entity}' specified"
  exit 1
end

if name.nil?
  puts "Must specify name"
  exit 1
end

if !['galaxy'].include?(entity) && parent.nil?
  puts "Must specify parent for #{entity}"
  exit 1
end

if !['asteroid', 'planet', 'star'].include?(entity) && (!size.nil? || !color.nil?)
  puts "Cannot specify size or color with #{entity}"
  exit 1
end

if !['galaxy', 'star'].include?(entity) && (xcoord.nil? || ycoord.nil? || zcoord.nil?)
  puts "Must specify location of #{entity}"
  exit 1
end

id = Motel.gen_uuid

entity_obj = nil
case entity
when 'galaxy'
  entity_obj =
    Cosmos::Entities::Galaxy.new \
      :id => id, :name => name

when 'solarsystem'
  entity_obj =
    Cosmos::Entities::SolarSystem.new \
      :id => id, :name => name, :parent_id => parent,
      :location => Motel::Location.new(:x => xcoord, :y => ycoord, :z => zcoord)

when 'star'
  entity_obj =
    Cosmos::Entities::Star.new \
    :id => id, :name => name, :parent_id => parent

when 'asteroid'
  entity_obj =
    Cosmos::Entities::Asteroid.new \
      :id   => id, :parent_id => parent,
      :name => name,
      :size => size,
      :color => color,
      :location => Motel::Location.new(:x => xcoord, :y => ycoord, :z => zcoord)

when 'planet'
  entity_obj =
    Cosmos::Entities::Planet.new \
      :id => id, :parent_id => parent,
      :name => name,
      :size => size,
      :color => color,
      :location => Motel::Location.new(:x => xcoord, :y => ycoord, :z => zcoord)

when 'moon'
  entity_obj =
    Cosmos::Entities::Moon.new \
      :id => id, :parent_id => parent,
      :name => name
end

RJR::Logger.log_level= ::Logger::INFO

rjr_node   = RJR::Nodes::AMQP.new :node_id => 'omega-cosmos-create', :broker => 'localhost'
login_user = Users::User.new(:id => 'admin', :password => 'nimda')
session    = rjr_node.invoke('omega-queue', 'users::login', login_user)
rjr_node.message_headers['session_id'] = session.id

rjr_node.invoke('omega-queue', 'cosmos::create_entity', entity_obj)
