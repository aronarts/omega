#!/usr/bin/ruby
# Retrieve omega server status
# 
# Requires omega-server to be in debugging mode
#
# Copyright (C) 2013 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3+ http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'optparse'
require 'pp'

require 'rjr/nodes/tcp'
require 'omega'

transport = :tcp
url       = 'jsonrpc://localhost:8181'
stats     = false

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this help screen') do
    pp opts
    exit
  end

  opts.on('-t', '--transport value', 'transport to use') do |t|
    transport = t
  end

  opts.on('-d', '--dst url', 'server to contact') do |u|
    url = u
  end

  opts.on('-s', '--stats', 'retreive omega statistics') do
    stats = true
  end

end

optparse.parse!

# TODO verify transport/url params
# TODO support other transports

node = RJR::Nodes::TCP.new :node_id => 'omega-status-retrieve'
puts "RJR:"
pp node.invoke(url, 'rjr::status')

puts "\nUsers:"
pp node.invoke(url, 'users::status')

puts "\nMotel:"
pp node.invoke(url, 'motel::status')

puts "\nManufactured:"
pp node.invoke(url, 'manufactured::status')

puts "\nMissions:"
pp node.invoke(url, 'missions::status')

if stats
  require 'users/user'
  require 'users/session'
  user = Users::User.new(:id => 'anon', :password => 'nona')
  session = node.invoke(url, 'users::login', user)
  node.message_headers['session_id'] = session.id

  require 'stats/stat'
  pp "num_of users:         #{node.invoke(url, 'stats::get', 'num_of', 'users')}"
  pp "num_of entities:      #{node.invoke(url, 'stats::get', 'num_of', 'entities')}"
  pp "num_of ships:         #{node.invoke(url, 'stats::get', 'num_of', 'ships')}"
  pp "num_of stations:      #{node.invoke(url, 'stats::get', 'num_of', 'stations')}"
  pp "num_of galaxies:      #{node.invoke(url, 'stats::get', 'num_of', 'galaxies')}"
  pp "num_of solar_systems: #{node.invoke(url, 'stats::get', 'num_of', 'solar_systems')}"
  pp "num_of planets:       #{node.invoke(url, 'stats::get', 'num_of', 'planets')}"
  pp "num_of missions:      #{node.invoke(url, 'stats::get', 'num_of', 'missions')}"

  pp "with_most entities:   #{node.invoke(url, 'stats::get', 'users_with_most', 'entities')}"
  pp "with_most kills:      #{node.invoke(url, 'stats::get', 'users_with_most', 'kills')}"
  pp "with_most times_killed: #{node.invoke(url, 'stats::get', 'users_with_most', 'times_killed')}"
  pp "with_most resources_collected: #{node.invoke(url, 'stats::get', 'users_with_most', 'resources_collected')}"
  pp "with_most loot_collected: #{node.invoke(url, 'stats::get', 'users_with_most', 'loot_collected')}"
  pp "with_most distance_moved: #{node.invoke(url, 'stats::get', 'users_with_most', 'distance_moved')}"
  pp "with_most missions_completed: #{node.invoke(url, 'stats::get', 'users_with_most', 'missions_completed')}"

  pp "with_least times_killed: #{node.invoke(url, 'stats::get', 'users_with_least', 'times_killed')}"
end
